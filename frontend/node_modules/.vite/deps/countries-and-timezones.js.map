{
  "version": 3,
  "sources": ["../../countries-and-timezones/src/build-country.js", "../../countries-and-timezones/src/build-timezone.js", "../../countries-and-timezones/src/index.js"],
  "sourcesContent": ["let timezonesMap;\n\nexport default function buildCountry(data, id) {\n  const name = data.countries[id];\n  if (!name) return null;\n\n  const tzMap = getTimezonesMap(data)[id] || {};\n\n  return {\n    id,\n    name,\n    timezones: tzMap.current || [],\n    allTimezones: tzMap.all || [],\n  };\n}\n\nfunction getTimezonesMap(data) {\n  timezonesMap ||= buildTimezonesMap(data);\n  return timezonesMap;\n}\n\nfunction buildTimezonesMap(data) {\n  return Object.keys(data.timezones).reduce((result, id) => {\n    const tz = data.timezones[id];\n    const {c, a} = tz;\n    const aliasTz = data.timezones[a] || {};\n    const countries = c || aliasTz.c;\n\n    if (!countries) return result;\n\n    for (const country of countries) {\n      if (!result[country])\n        Object.assign(result, {[country]: {current: [], all: []}});\n      if (tz.r === undefined) result[country].current.push(id);\n      result[country].all.push(id);\n    }\n\n    return result;\n  }, {});\n}\n", "export default function buildTimezone(data, name) {\n  const timezone = data.timezones[name];\n  if (!timezone) return null;\n\n  const {a: aliasOf = null} = timezone;\n  const aliasTz = aliasOf ? data.timezones[aliasOf] : {};\n  const tz = {\n    ...aliasTz,\n    ...data.timezones[name],\n  };\n\n  const countries = tz.c || [];\n  const utcOffset = tz.u;\n  const dstOffset = Number.isInteger(tz.d) ? tz.d : utcOffset;\n\n  const result = {\n    name,\n    countries,\n    utcOffset,\n    utcOffsetStr: getOffsetString(utcOffset),\n    dstOffset,\n    dstOffsetStr: getOffsetString(dstOffset),\n    aliasOf,\n  };\n  if (timezone.r) result.deprecated = true;\n  return result;\n}\n\nfunction getOffsetString(offset) {\n  const hours = Math.floor(Math.abs(offset) / 60);\n  const min = offset % 60;\n  const sign = offset < 0 ? '-' : '+';\n\n  return `${sign}${getNumberString(hours)}:${getNumberString(min)}`;\n}\n\nfunction getNumberString(input) {\n  const number_ = Math.abs(input);\n  const prefix = number_ < 10 ? '0' : '';\n  return `${prefix}${number_}`;\n}\n", "import data from './data.json';\nimport buildCountry from './build-country.js';\nimport buildTimezone from './build-timezone.js';\n\nconst totalTimezones = Object.keys(data.timezones).length;\nconst countries = {};\nconst timezones = {};\nlet memoizedTimezones = 0;\n\nexport function getAllCountries(options = {}) {\n  return Object.keys(data.countries).reduce((previous, id) => {\n    return Object.assign(previous, {[id]: getCountry(id, options)});\n  }, {});\n}\n\nexport function getAllTimezones(options = {}) {\n  if (totalTimezones !== memoizedTimezones)\n    for (const name of Object.keys(data.timezones)) {\n      getTimezone(name);\n    }\n\n  return deliverTimezones(timezones, options);\n}\n\nexport function getCountry(id, options = {}) {\n  if (!countries[id]) memoizeCountry(buildCountry(data, id));\n  return deliverCountry(countries[id], options);\n}\n\nfunction memoizeCountry(country) {\n  if (!country) return;\n  countries[country.id] = country;\n}\n\nexport function getTimezone(name) {\n  if (!timezones[name]) memoizeTimezone(buildTimezone(data, name));\n  return timezones[name] ? {...timezones[name]} : null;\n}\n\nfunction memoizeTimezone(timezone) {\n  if (!timezone) return;\n  timezones[timezone.name] = timezone;\n  memoizedTimezones = Object.keys(timezone).length;\n}\n\nexport function getCountriesForTimezone(tzName, options = {}) {\n  const timezone = getTimezone(tzName) || {};\n  const values = timezone.countries || [];\n  return values.map((c) => getCountry(c, options));\n}\n\nexport function getCountryForTimezone(tzName, options = {}) {\n  const [main] = getCountriesForTimezone(tzName, options);\n  return main || null;\n}\n\nexport function getTimezonesForCountry(countryId, options = {}) {\n  const country = getCountry(countryId, options);\n  if (!country) return null;\n  const values = country.timezones || [];\n  return values.map((timezone) => getTimezone(timezone));\n}\n\nfunction deliverTimezones(tzs, options) {\n  const {deprecated} = options || {};\n  if (deprecated === true) return tzs;\n  return Object.keys(tzs).reduce((previous, key) => {\n    if (!tzs[key].deprecated) Object.assign(previous, {[key]: tzs[key]});\n    return previous;\n  }, {});\n}\n\nfunction deliverCountry(country, options) {\n  if (!country) return null;\n  const {deprecated} = options || {};\n  const {allTimezones, ...other} = country;\n  const tz = deprecated ? country.allTimezones : country.timezones;\n  return {...other, timezones: tz};\n}\n\nconst utils = {\n  getCountry,\n  getTimezone,\n  getAllCountries,\n  getAllTimezones,\n  getTimezonesForCountry,\n  getCountriesForTimezone,\n  getCountryForTimezone,\n};\n\nexport default utils;\n"],
  "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",
  "names": ["timezonesMap", "buildCountry", "data", "id", "name", "countries", "tzMap", "getTimezonesMap", "timezones", "current", "allTimezones", "all", "buildTimezonesMap", "Object", "keys", "reduce", "result", "tz", "c", "a", "aliasTz", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "country", "value", "assign", "_defineProperty", "r", "undefined", "push", "err", "e", "f", "buildTimezone", "timezone", "_timezone$a", "aliasOf", "_objectSpread", "utcOffset", "u", "dstOffset", "Number", "isInteger", "d", "utcOffsetStr", "getOffsetString", "dstOffsetStr", "deprecated", "offset", "hours", "Math", "floor", "abs", "min", "sign", "concat", "getNumberString", "input", "number_", "prefix", "totalTimezones", "length", "memoizedTimezones", "getAllCountries", "options", "arguments", "previous", "getCountry", "getAllTimezones", "_i", "_Object$keys", "getTimezone", "deliverTimezones", "memoizeCountry", "deliverCountry", "memoizeTimezone", "getCountriesForTimezone", "tzName", "values", "map", "getCountryForTimezone", "_getCountriesForTimez", "_getCountriesForTimez2", "_slicedToArray", "main", "getTimezonesForCountry", "countryId", "tzs", "_ref", "key", "_ref2", "other", "_objectWithoutProperties", "_excluded", "utils"]
}
